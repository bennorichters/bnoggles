def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterBuildMode = localProperties.getProperty('flutter.buildMode')

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

println 'buildMode: ' + localProperties.getProperty('flutter.buildMode')

def keystoreProperties = new Properties()
if (flutterBuildMode == 'release') {
    def keystorePropertiesFile = rootProject.file("key.properties")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.github.bennorichters.bnoggles"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 10
        versionName '1.10'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    if (flutterBuildMode == 'release') {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

	buildTypes {
		release {
            if (flutterBuildMode == 'release') {
                signingConfig signingConfigs.release

                minifyEnabled true
                useProguard true

                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            } else {
                signingConfig signingConfigs.debug
            }
		}
	}
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
