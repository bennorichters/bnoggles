// Copyright (c) 2019, The Bnoggles Team.
// Please see the AUTHORS file for details.
// All rights reserved. Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

import 'package:flutter/material.dart';

/// Creates a [String] based on the given [value].
typedef String LabelRenderer(int value);

/// Creates a list of three or four widgets; an [Icon], a [Text], optionally a
/// [Switch] and a [Slider].
///
/// The user can use the slider to set the value of [sliderNotifier].
/// [sliderNotifier] can take an integer value between [min] and [max], both
/// inclusive. This value is always n times [stepSize] bigger than [min], where
/// n is an integer bigger than or equal to zero. [max] - [min] should be a
/// multiple of [stepSize]. [stepSize] takes the value 1 if omitted.
///
/// The [Text] widget shows the string generated by [label]. This
/// [LabelRenderer] takes the current value of the [Slider] as its input.
///
/// If a [switchNotifier] is provided, the slider is preceded by a switch. If
/// the switch is 'off' the slider is disabled and the text widget shows an
/// empty text.
List<Widget> intSlider({
  @required IconData icon,
  @required ValueNotifier<int> sliderNotifier,
  @required LabelRenderer label,
  @required int min,
  @required int max,
  int stepSize = 1,
  ValueNotifier<bool> switchNotifier,
}) {
  int divisions = (max - min) ~/ stepSize;
  assert(
      min + stepSize * divisions == max,
      'Inconsistent slider parameters: '
      '$max - $min is not divisible by $stepSize');

  _Slider slider = _Slider(
    label: label,
    sliderNotifier: sliderNotifier,
    min: min,
    max: max,
    divisions: divisions,
    switchNotifier: switchNotifier,
  );

  return [
    Icon(icon, size: 40.0),
    _Label(
      label: label,
      sliderNotifier: sliderNotifier,
      switchNotifier: switchNotifier,
    ),
    (switchNotifier == null
        ? slider
        : _DisableableSlider(
            slider: slider,
            switchNotifier: switchNotifier,
          )),
  ];
}

class _DisableableSlider extends StatefulWidget {
  _DisableableSlider({
    this.switchNotifier,
    this.slider,
  });

  final ValueNotifier<bool> switchNotifier;
  final _Slider slider;

  @override
  State<StatefulWidget> createState() => _DisableableSliderState();
}

class _DisableableSliderState extends State<_DisableableSlider> {
  void onChanged(bool isOn) {
    setState(() {
      widget.switchNotifier.value = isOn;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        _SettingSwitch(
          notifier: widget.switchNotifier,
          onChanged: onChanged,
        ),
        Expanded(
          child: widget.slider,
        ),
      ],
    );
  }
}

class _Label extends StatefulWidget {
  _Label({
    Key key,
    this.sliderNotifier,
    this.label,
    this.switchNotifier,
  }) : super(key: key);
  final ValueNotifier<int> sliderNotifier;
  final LabelRenderer label;
  final ValueNotifier<bool> switchNotifier;

  @override
  _LabelState createState() => _LabelState();
}

class _LabelState extends State<_Label> {
  @override
  void initState() {
    super.initState();
    widget.sliderNotifier.addListener(_didValueChange);

    if (widget.switchNotifier != null) {
      widget.switchNotifier.addListener(_didValueChange);
    }
  }

  void _didValueChange() => setState(() {});

  @override
  Widget build(BuildContext context) => Text(
        (widget.switchNotifier == null || widget.switchNotifier.value)
            ? widget.label(widget.sliderNotifier.value)
            : '',
        style: TextStyle(fontSize: 20.0),
      );

  @override
  void dispose() {
    widget.sliderNotifier.removeListener(_didValueChange);
    if (widget.switchNotifier != null) {
      widget.switchNotifier.removeListener(_didValueChange);
    }

    super.dispose();
  }
}

class _Slider extends StatefulWidget {
  _Slider({
    Key key,
    this.sliderNotifier,
    this.label,
    this.min,
    this.max,
    this.divisions,
    this.switchNotifier,
  }) : super(key: key);

  final ValueNotifier<int> sliderNotifier;
  final int min;
  final int max;
  final int divisions;
  final LabelRenderer label;
  final ValueNotifier<bool> switchNotifier;

  @override
  _SliderState createState() => _SliderState();
}

class _SliderState extends State<_Slider> {
  ValueNotifier<int> notifier;
  double currentValue;
  double min;
  double max;
  int divisions;
  LabelRenderer label;

  @override
  void initState() {
    super.initState();

    currentValue = widget.sliderNotifier.value + .0;
    notifier = widget.sliderNotifier;
    min = widget.min + .0;
    max = widget.max + .0;
    divisions = widget.divisions;
    label = widget.label;

    if (widget.switchNotifier != null) {
      widget.switchNotifier.addListener(_didValueChange);
    }
  }

  void _didValueChange() => setState(() {});

  void _onChanged(double value) {
    setState(() {
      currentValue = value;
    });
  }

  void _onChangedEnd(double value) {
    notifier.value = value.floor();
  }

  @override
  Widget build(BuildContext context) {
    return Slider(
      value: currentValue,
      min: min,
      max: max,
      divisions: divisions,
      label: label(currentValue.floor()),
      onChanged: (widget.switchNotifier == null || widget.switchNotifier.value)
          ? _onChanged
          : null,
      onChangeEnd: _onChangedEnd,
    );
  }

  @override
  void dispose() {
    if (widget.switchNotifier != null) {
      widget.switchNotifier.removeListener(_didValueChange);
    }

    super.dispose();
  }
}

class _SettingSwitch extends StatelessWidget {
  const _SettingSwitch({
    Key key,
    this.notifier,
    this.onChanged,
  }) : super(key: key);
  final ValueNotifier<bool> notifier;
  final ValueChanged<bool> onChanged;

  @override
  Widget build(BuildContext context) {
    return Switch(
      value: notifier.value,
      onChanged: onChanged,
    );
  }
}
